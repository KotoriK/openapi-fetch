/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/create-post": {
    post: {
      requestBody: components["requestBodies"]["CreatePost"];
      responses: {
        201: components["responses"]["CreatePost"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/create-tag/{name}": {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      requestBody: components["requestBodies"]["CreateTag"];
      responses: {
        201: components["responses"]["CreateTag"];
        500: components["responses"]["Error"];
      };
    };
    parameters: {
      path: {
        name: string;
      };
    };
  };
  "/post/{post_id}": {
    get: {
      parameters: {
        path: {
          post_id: string;
        };
      };
      responses: {
        200: components["responses"]["PostGet"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
    delete: {
      parameters: {
        path: {
          post_id: string;
        };
      };
      responses: {
        200: components["responses"]["PostDelete"];
        500: components["responses"]["Error"];
      };
    };
    parameters: {
      path: {
        post_id: string;
      };
    };
  };
  "/self": {
    get: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/anyMethod": {
    get: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
    put: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
    post: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
    delete: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
    options: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
    head: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
    patch: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
    trace: {
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["Error"];
        500: components["responses"]["Error"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Post: {
      title: string;
      body: string;
      publish_date?: number;
    };
    User: {
      email: string;
      age?: number;
      avatar?: string;
    };
  };
  responses: {
    CreatePost: {
      content: {
        "application/json": {
          status: string;
        };
      };
    };
    CreateTag: {
      content: {
        "application/json": {
          status: string;
        };
      };
    };
    User: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    PostDelete: {
      content: {
        "application/json": {
          status: string;
        };
      };
    };
    PostGet: {
      content: {
        "application/json": components["schemas"]["Post"];
      };
    };
    Error: {
      content: {
        "application/json": {
          code: number;
          message: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: {
    CreatePost: {
      content: {
        "application/json": {
          title: string;
          body: string;
          publish_date: number;
        };
      };
    };
    CreateTag?: {
      content: {
        "application/json": {
          description?: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
